FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# Florida Man Generator

This API allows users to find Florida Man news articles. The API serves JSON data extended by the Mason hypermedia format. Users can find articles and also add new articles. They can also list articles added by other users to see what they have come up with.

# Group Link Relations

This section described custom link relations defined in this API. These are not resources. The API also uses 
[IANA link relations](http://www.iana.org/assignments/link-relations/link-relations.xhtml) where applicable. Custom link relations are CURIEs that use the floman prefix. 

## add-article

This is a control that is used to add an article to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## edit-article

This is a control that is used to edit an article in associated collection resource. The control includes a JSON schema and must be accessed with PUT.

## delete-article

This is a control that is used to delete an article in associated collection resource. Must be accessed with DELETE.

## articles-all

Leads to the root level articles collection which is a list of all articles known to the API.

## article-by-date

Leads to an article item resource associated with the date provided.

## add-user

This is a control that is used to add a user to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## edit-user

This is a control that is used to edit a user in associated collection resource. The control includes a JSON schema and must be accessed with PUT.

## delete-user

This is a control that is used to delete a user in associated collection resource. Must be accessed with DELETE.

## users-all

Leads to the root level users collection which is a list of all users known to the API.

## owned-article

Leads to an added article item resource associated with the user provided.

## user-by-name

Leads to an user item resource associated with the username provided.

## add-addedarticle

This is a control that is used to add an added article to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## edit-addedarticle

This is a control that is used to edit an added article in associated collection resource. The control includes a JSON schema and must be accessed with PUT.

## delete-user

This is a control that is used to delete an added article in associated collection resource. Must be accessed with DELETE.

## addedarticles-all

Leads to the root level users collection which is a list of all added articles known to the API.

## addedarticle-by-owner

Leads to an added article item resource associated with the owner provided.

# Group Profiles

This section includes resource profiles which provide semantic descriptions for the attributes of each resource, as well as the list of controls (by link relation) available from that resource.

## Article Profile

Profile definition for all article related resources.

### Link Relations

This section lists all possible link relations associated with articles; not all of them are necessarily present on each resource type. The following link relations from the floman namespace are used:

 * [add-article](reference/link-relations/add-article)
 * [edit-article](reference/link-relations/edit-article)
 * [delete-article](reference/link-relations/delete-article)
 * [articles-all](reference/link-relations/articles-add)
 * [article-by-date](reference/link-relations/article-by-date)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * collection
 * items
 * up
 
### Semantic Descriptors

#### Data Type Article

 * `id`: ID of the entry. Mandatory
 * `date`: Date of the article. Mandatory and unique.
 * `link`: Link to the article. Optional.
 * `headline`: Headline of the article. Mandatory
 * `modtime`: Modification date. Mandatory.

## Error Profile

Profile definition for all errors returned by the API. See [Mason error control](https://github.com/JornWildt/Mason/blob/master/Documentation/Mason-draft-2.md#property-name-error) for more information about errors.

+ Attributes

    + resource_url (string, required) - URI of the resource the error was generated from. 
 
## Added article Profile

Profile definition for all added article related resources.

### Link Relations

This section lists all possible link relations associated with tracks; not all of them are necessarily present on each resource type. The following link relations from the floman namespace are used:

 * [add-addedarticle](reference/link-relations/add-addedarticle)
 * [edit-addedarticle](reference/link-relations/edit-addedarticle)
 * [delete-addedarticle](reference/link-relations/delete-addedarticle)
 * [addedarticles-all](reference/link-relations/addedarticles-all)
 * [addedarticle-by-owner](reference/link-relations/addedarticle-by-owner)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * collection
 * items
 * up

### Semantic Descriptors

#### Data Type Track

 * `id`: ID of the added article. Mandatory
 * `date`: Date of the article. Optional.
 * `link`: Link to the article. Optional.
 * `headline`: headline of the article. Mandatory.
 * `modtime`: Modification date. Mandatory.
 * `owner_id`: ID of the owner of the article. Mandatory. Points to some user.
 
## User Profile

Profile definition for all user related resources.

### Link Relations

This section lists all possible link relations associated with tracks; not all of them are necessarily present on each resource type. The following link relations from the floman namespace are used:

 * [add-user](reference/link-relations/add-user)
 * [edit-user](reference/link-relations/edit-user)
 * [delete-user](reference/link-relations/delete-user)
 * [users-all](reference/link-relations/users-all)
 * [user-by-name](reference/link-relations/user-by-name)
 * [owned-article](reference/link-relations/owned-article)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * collection
 * items
 * up

### Semantic Descriptors

#### Data Type Track

 * `id`: ID of the user. Mandatory
 * `username`: Name of the user. Mandatory and unique.
 
# Group Entry

This group contains the entry point of the API

## Entry Point [/api/]

### Get entry point [GET]

Get the API entry point

+ Request

    + Headers
    
            Accept: application/vnd.mason+json
            
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "@controls": {
                    "floman:articles-all": {
                        "href": "/api/articles/"
                    },
                    "floman:users-all": {
                        "href": "/api/users/"
                    },
                    "floman:addedarticles-all": {
                        "href": "/api/addedarticles/"
                    }
                }
            }

 
# Group Articles

All of these resources use the [Article Profile](reference/profiles/article-profile). In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## Article Collection [/api/articles/]

A list of all articles known to the API. You can also add new articles with POST, edit articles using PUT and delete articles using DELETE.

### List all articles [GET]

Get a list of all articles known to the API.

+ Relation: articles-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "@controls": {
                    "floman:article-by-date": {
                        "href": "/api/articles/?{date}",
                        "title": "Article by date",
                        "isHrefTemplate": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "description": "Date of the article you want to find",
                                    "type": "string",
                                    "pattern": "^[0-3][0-9]\.[0-1][0-9]\.[0-9][0-9][0-9][0-9]$",
                                    "enum": ["date"]
                                }
                            },
                            "required": ["date"]
                        }
                    }
                },
                "items": [
                    {
                        "id": 1,
                        "date": "02.01.2019",
                        "link": "https://www.wcjb.com/content/news/Florida-man-doesnt-get-straw-attacks-McDonalds-employee-503812581.html",
                        "headline": "Florida man doesn't get straw, attacks McDonald's employee",
                        "modtime": "Some modificationg date"
                        "@controls": {
                            "up": {
                                "href": "/api/articles/"
                            }
                        },
                    }
                ]
            }
            
### Add article [POST]

Adds a new article. The article representation must be valid against the article schema.

+ Relation: add-article
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "date": "05.05.2015",
                "link": "http://google.com",
                "headline": "Some Headline"
            }

+ Response 201

    + Headers
    
            Location: /api/articles/05.05.2015/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": ["'date' and 'headline' are required properties"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to add an article with a date that's already used by another article.

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "An article with date '05.05.2015' already exists."
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/articles/05.05.2015",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Edit article [PUT]

Replace the article's representation with a new one. Missing optinal fields will be set to null. Must validate against the article schema. 

+ Relation: edit-article
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "date": "05.05.2015",
                "link": "http://google.com",
                "headline": "Some Headline"
            }
        
+ Response 204


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": ["'date' and 'headline' are required properties"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an article that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015",
                "@error": {
                    "@message": "Article not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
+ Response 409 (application/vnd.mason+json)

    The client is trying to change the date of the article to a one that is already in use.

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015",
                "@error": {
                    "@message": "Provided date is already in use.",
                    "@messages": ["Date '05.05.2015' is already used by other article"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/articles/05.05.2015",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete article [DELETE]

Deletes the article.

+ Relation: delete-article
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an article that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015",
                "@error": {
                    "@message": "Article not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }