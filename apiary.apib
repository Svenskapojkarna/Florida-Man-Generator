FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# Florida Man Generator

This API allows users to find Florida Man news articles. The API serves JSON data extended by the Mason hypermedia format. Users can find articles and also add new articles. They can also list articles added by other users to see what they have come up with.

# Group Link Relations

This section described custom link relations defined in this API. These are not resources. The API also uses 
[IANA link relations](http://www.iana.org/assignments/link-relations/link-relations.xhtml) where applicable. Custom link relations are CURIEs that use the floman prefix. 

## add-article

This is a control that is used to add an article to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## articles-all

Leads to the root level articles collection which is a list of all articles known to the API.

## article-by-date

Leads to an article item resource associated with the date provided.

## add-user

This is a control that is used to add a user to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## users-all

Leads to the root level users collection which is a list of all users known to the API.

## owned-articles

Leads to an added article item resource associated with the user provided.

## user-by-name

Leads to an user item resource associated with the username provided.

## add-addedarticle

This is a control that is used to add an added article to the associated collection resource. The control includes a JSON schema and must be accessed with POST. 

## addedarticles-all

Leads to the root level users collection which is a list of all added articles known to the API.

## addedarticle-by-owner

Leads to an added article item resource associated with the owner provided.

# Group Profiles

This section includes resource profiles which provide semantic descriptions for the attributes of each resource, as well as the list of controls (by link relation) available from that resource.

## Article Profile

Profile definition for all article related resources.

### Link Relations

This section lists all possible link relations associated with articles; not all of them are necessarily present on each resource type. The following link relations from the floman namespace are used:

 * [add-article](reference/link-relations/add-article)
 * [articles-all](reference/link-relations/articles-add)
 * [article-by-date](reference/link-relations/article-by-date)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * profile
 * items
 * self
 * edit
 * delete

### Semantic Descriptors

#### Data Type Article

 * `date`: Date of the article. Mandatory and unique.
 * `link`: Link to the article. Optional.
 * `headline`: Headline of the article. Mandatory

## User Profile

Profile definition for all user related resources.

### Link Relations

This section lists all possible link relations associated with users; not all of them are necessarily present on each resource type. The following link relations from the floman namespace are used:

 * [add-user](reference/link-relations/add-user)
 * [users-all](reference/link-relations/users-all)
 * [user-by-name](reference/link-relations/user-by-name)
 * [owned-articles](reference/link-relations/owned-articles)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * profile
 * items
 * self
 * edit
 * delete

### Semantic Descriptors

#### Data Type Track

 * `username`: Name of the user. Mandatory and unique.

## Added article Profile

Profile definition for all added article related resources.

### Link Relations

This section lists all possible link relations associated with added articles; not all of them are necessarily present on each resource type. The following link relations from the floman namespace are used:

 * [add-addedarticle](reference/link-relations/add-addedarticle)
 * [addedarticles-all](reference/link-relations/addedarticles-all)
 * [addedarticle-by-owner](reference/link-relations/addedarticle-by-owner)
 
The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * profile
 * items
 * self
 * edit
 * delete
 * owner

### Semantic Descriptors

#### Data Type Track

 * `date`: Date of the article. Optional.
 * `link`: Link to the article. Optional.
 * `headline`: headline of the article. Mandatory.
 * `owner_username`: Username of the owner of the article. Mandatory. Points to some user.

## Error Profile

Profile definition for all errors returned by the API. See [Mason error control](https://github.com/JornWildt/Mason/blob/master/Documentation/Mason-draft-2.md#property-name-error) for more information about errors.

+ Attributes

    + resource_url (string, required) - URI of the resource the error was generated from. 

# Group Entry

This group contains the entry point of the API

## Entry Point [/api/]

### Get entry point [GET]

Get the API entry point

+ Request

    + Headers
    
            Accept: application/vnd.mason+json
            
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "@controls": {
                    "floman:articles-all": {
                        "href": "/api/articles/"
                    },
                    "floman:users-all": {
                        "href": "/api/users/"
                    },
                    "floman:addedarticles-all": {
                        "href": "/api/addedarticles/"
                    }
                }
            }

 
# Group Articles

All of these resources use the [Article Profile](reference/profiles/article-profile). In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## Article Collection [/api/articles/]

A list of all articles known to the API. You can also add new articles with POST, edit articles using PUT and delete articles using DELETE.

### List all articles [GET]

Get a list of all articles known to the API.

+ Relation: articles-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/article/"
                    },
                    "floman:add-article": {
                        "href": "/api/articles/",
                        "title": "Add a new article",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "description": "Date of the article",
                                    "type": "string",
                                    "pattern": "^[0-3][0-9]\.[0-1][0-9]\.[0-9][0-9][0-9][0-9]$"
                                },
                                "link": {
                                    "description": "Link to the article",
                                    "type": "string"
                                },
                                "headline": {
                                    "description": "Headline of the article",
                                    "type": "string"
                                }
                            },
                            "required": ["date"]
                        }
                    },
                    "floman:article-by-date": {
                        "href": "/api/articles/{date}/",
                        "title": "Article by date",
                        "isHrefTemplate": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "description": "Date of the article you want to find",
                                    "type": "string",
                                    "pattern": "^[0-3][0-9]\.[0-1][0-9]\.[0-9][0-9][0-9][0-9]$"
                                }
                            },
                            "required": ["date"]
                        }
                    }
                },
                "items": [
                    {
                        "date": "02.01.2019",
                        "link": "https://www.wcjb.com/content/news/Florida-man-doesnt-get-straw-attacks-McDonalds-employee-503812581.html",
                        "headline": "Florida man doesn't get straw, attacks McDonald's employee",
                        "modtime": "Some modificationg date"
                    }
                ]
            }
            
### Add article [POST]

Adds a new article. The article representation must be valid against the article schema.

+ Relation: add-article
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "date": "05.05.2015",
                "link": "http://google.com",
                "headline": "Some Headline"
            }

+ Response 201

    + Headers
    
            Location: /api/articles/05.05.2015/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": ["'date' and 'headline' are required properties"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to add an article with a date that's already used by another article.

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "An article with date '05.05.2015' already exists."
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Article item [/api/articles/{date}/]

A single article known to the API. The article is fetched using the date of the article. You can only get the article from associated collection using GET.

+ Parameters

    + date (string, required) - Date of the article

### Get Article [GET]

Gets the article from collection.

+ Relation: article-by-date
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "date": "02.01.2019",
                "link": "https://www.wcjb.com/content/news/Florida-man-doesnt-get-straw-attacks-McDonalds-employee-503812581.html",
                "headline": "Florida man doesn't get straw, attacks McDonald's employee"
                "@controls": {
                    "floman:articles-all": {
                        "href": "/api/articles/"
                    },
                    "profile": {
                        "href": "/profiles/article/"  
                    },
                    "self": {
                        "href": "/api/articles/02.01.2019/"
                    },
                    "edit": {
                        "href": "/api/articles/02.01.2019/",
                        "title": "Edit this article",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "description": "Date of the article",
                                    "type": "string",
                                    "pattern": "^[0-3][0-9]\.[0-1][0-9]\.[0-9][0-9][0-9][0-9]$"
                                },
                                "link": {
                                    "description": "Link to the article",
                                    "type": "string"
                                },
                                "headline": {
                                    "description": "Headline of the article",
                                    "type": "string"
                                }
                            }
                        },
                        "required": []
                    },
                    "floman:delete": {
                        "href": "/api/articles/02.01.2019/",
                        "title": "Delete this article",
                        "method": "DELETE"
                    }
                }
            }
            
+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an article that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/articles/date/",
                "@error": {
                    "@message": "Article not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

### Edit article [PUT]

Replace the article's representation with a new one. Missing optinal fields will be set to null. Must validate against the article schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "date": "05.05.2015",
                "link": "http://google.com",
                "headline": "Some Headline"
            }
        
+ Response 204


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": ["'date' and 'headline' are required properties"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an article that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Article not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
+ Response 409 (application/vnd.mason+json)

    The client is trying to change the date of the article to a one that is already in use.

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Provided date is already in use.",
                    "@messages": ["Date '05.05.2015' is already used by other article"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete article [DELETE]

Deletes the article.

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an article that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/articles/05.05.2015/",
                "@error": {
                    "@message": "Article not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

# Group Users

All of these resources use the [User Profile](reference/profiles/user-profile). In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## User Collection [/api/users/]

A list of all users known to the API. You can also add new user with POST, edit existing user using PUT and delete existing user using DELETE.

### Get Users [GET]

Gets all users from collection.

+ Relation: users-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/user/"  
                    },
                    "floman:user-by-name": {
                        "href": "/api/users/{username}/",
                        "title": "Get a user by name",
                        "isHrefTemplate": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "description": "Username of the user",
                                    "type": "string"
                                }
                            },
                            "required": ["username"]
                        }
                    },
                    "floman:add-user": {
                        "href": "/api/users/",
                        "title": "Add a new user",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "description": "Username of the user",
                                    "type": "string"
                                }
                            },
                            "required": ["username"]
                        }
                    }
                },
                "items": [
                    {
                        "username": "sample1"
                    }
                ]
            }
            
### Add user [POST]

Adds a new user. The user representation must be valid against the user schema.

+ Relation: add-user
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "username": "svenskapojkarna"
            }

+ Response 201

    + Headers
    
            Location: /api/users/svenskapojkarna/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body
    
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": ["'username' is a required property"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to add a user with a username that's already used by another user.

    + Body
    
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "The username is already used by another user."
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## User item [/api/users/{username}/]

A single user known to the API. The user is fetched using the username. You can only get the user from associated collection using GET.

+ Parameters

    + username (string, required) - Name of the user to be fetched.

### Get User [GET]

Gets the user from collection.

+ Relation: user-by-name
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "username": "sample1",
                "@controls": {
                    "floman:users-all": {
                        "href": "/api/users/"
                    },
                    "profile": {
                        "href": "/profiles/user/"
                    },
                    "self": {
                        "href": "/api/users/sample1/"
                    },
                    "edit": {
                        "href": "/api/users/sample1/",
                        "title": "Edit this user",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "description": "Username of the user",
                                    "type": "string"
                                }
                            }
                        },
                        "required": ["username"]
                    },
                    "floman:delete": {
                        "href": "/api/users/sample1/",
                        "title": "Delete this user",
                        "method": "DELETE"
                    },
                    "floman:owned-articles": {
                        "href": "/api/addedarticles/?owner={someOwner}",
                        "title": "Get articles owned by this user",
                        "isHrefTemplate": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "someOwner": {
                                    "description": "Username of the owner of the article",
                                    "type": "String"
                                }
                            }
                        },
                        "required": ["someOwner"]
                    }
                }
            }

            
### Edit user [PUT]

Replace the user's name with a new one. Must validate against the article schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "username": "svenskapojkarna"
            }
        
+ Response 204


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body
    
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": ["'username' is a required property"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
+ Response 404 (application/vnd.mason+json)

    The client is trying to edit a user that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
+ Response 409 (application/vnd.mason+json)

    The client is trying to change the name of the user to a one that is already in use.

    + Body
    
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "Provided name is already in use.",
                    "@messages": ["'svenskapojkarna' is already used by other user"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete user [DELETE]

Deletes the user.

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete a user that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

# Group Added Articles 

All of these resources use the [Added Article Profile](reference/profiles/addedarticle-profile). In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## Added article collection [/api/addedarticles/]

A list of all added articles known to the API. You can also add new articles with POST, edit existing article using PUT and delete existing article using DELETE.

### Get added articles [GET]

Gets all added articles from collection.

+ Relation: addedarticles-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "@controls": {
                    "floman:add-addedarticle": {
                        "href": "/api/addedarticles/",
                        "title": "Add a new addedarticle",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "description": "Date of the addedarticle",
                                    "type": "string",
                                    "pattern": "^[0-3][0-9]\.[0-1][0-9]\.[0-9][0-9][0-9][0-9]$"
                                },
                                "link": {
                                    "description": "Link to the addedarticle",
                                    "type": "string"
                                },
                                "headline": {
                                    "description": "Headline of the addedarticle",
                                    "type": "string"
                                },
                                "owner_username": {
                                    "description": "Username of the user who has created this article.",
                                    "type": "String"
                                }
                            },
                            "required": ["headline", "owner_username"]
                        }
                    },
                    "floman:addedarticle-by-id": {
                        "href": "/api/addedarticles/{id}/",
                        "title": "Get added article by id",
                        "isHrefTemplate": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "ID of the added article",
                                    "type": "number"
                                }
                            },
                            "required": ["id"]
                        }
                    },
                    "floman:addedarticle-by-owner": {
                        "href": "/api/addedarticles/?owner={someOwner}",
                        "title": "Added article by owner",
                        "isHrefTemplate": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "someOwner": {
                                    "description": "Owner of the article you want to find",
                                    "type": "String"
                                }
                            },
                            "required": ["someOwner"]
                        }
                    }
                },
                "items": [
                    {
                        "date": "06.05.2019",
                        "link": "https://www.google.com",
                        "headline": "Florida man fights with API",
                        "owner_username": "sample1"
                    }
                ]
            }
            
### Add added article [POST]

Adds an added article. The added article representation must be valid against the article schema.

+ Relation: add-addedarticle

+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "date": "05.05.2015",
                "link": "http://google.com",
                "headline": "Some Headline"
                "owner_username": "sample2"
            }

+ Response 201

    + Headers
    
            Location: /api/addedarticles/2/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body
    
            {
                "resource_url": "/api/addedarticles/2/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": ["'headline' and 'owner_username' are required properties"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/addedarticles/2/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }


## Added article item [/api/addedarticles/{id}/]

A single added-article known to the API. The article is fetched using the articles ID. You can only get the article from associated collection using GET.

+ Parameters

    + id (number, required) - ID of the article to be fetched.

### Get Added Article [GET]

Gets the article from collection.

+ Relation: addedarticle-by-id
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "date": "06.05.2019",
                "link": "https://www.google.com",
                "headline": "Florida man fights with API",
                "owner_username": "sample1"
                "@controls": {
                    "floman:addedarticles-all": {
                        "href": "/api/addedarticles/"
                    },
                    "profile": {
                        "href": "/profiles/addedarticle/"
                    },
                    "self": {
                        "href": "/api/addedarticles/1/"
                    },
                    "floman:owner": {
                        "href": "/api/users/?{username}/",
                        "title": "Get owner of this article",
                        "isHrefTemplate": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "description": "Username of the owner of the article",
                                    "type": "String"
                                }
                            }
                        },
                        "required": ["username"]
                    },
                    "edit": {
                        "href": "/api/addedarticles/1/",
                        "title": "Edit this added article",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object"
                            "properties": {
                                "date": {
                                    "description": "Date of the addedarticle",
                                    "type": "string",
                                    "pattern": "^[0-3][0-9]\.[0-1][0-9]\.[0-9][0-9][0-9][0-9]$"
                                },
                                "link": {
                                    "description": "Link to the addedarticle",
                                    "type": "string"
                                },
                                "headline": {
                                    "description": "Headline of the addedarticle",
                                    "type": "string"
                                },
                                "owner_username": {
                                    "description": "Username of the user who has created this article.",
                                    "type": "String"
                                }
                            }
                        },
                        "required": ["headline", "owner_username"]
                    },
                    "floman:delete": {
                        "href": "/api/addedarticles/1/",
                        "title": "Delete this added article",
                        "method": "DELETE"
                    }
                }
            }

### Edit added article [PUT]

Modify an added article. Must validate against the added article schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "date": "05.05.2015",
                "link": "http://google.com",
                "headline": "Some Headline"
                "owner_username": "sample2"
            }
        
+ Response 204


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema.

    + Body
    
            {
                "resource_url": "/api/addedarticles/2/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": ["'headline' and 'owner_username' are required properties"]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
+ Response 404 (application/vnd.mason+json)

    The client is trying to edit an added article that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/addedarticles/2/",
                "@error": {
                    "@message": "Article not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/svenskapojkarna/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete added article [DELETE]

Deletes the added article.

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an added article that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/addedarticles/3/",
                "@error": {
                    "@message": "Article not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

## Added article by owner [/api/addedarticles/?owner={someOwner}]

A collection of added articles known to the API. The articles are fetched using the articles owner username. You can only get the article from associated collection using GET.

+ Parameters

    + someOwner (string, required) - username of the article owner.

### Get Added Article by owner [GET]

Gets the articles.

+ Relation: owned-articles
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "floman": {
                        "name": "/floridaman/link-relations#"
                    }
                },
                "@controls": {
                    "floman:addedarticle-by-id": {
                        "href": "/api/addedarticles/{id}/",
                        "title": "Get an added article by id",
                        "isHrefTemplate": true,
                        "schema": (
                            "type": "object",
                            "properties": (
                                "id": (
                                    "description": "Id of the article",
                                    "type": "number"
                                )
                            )
                        ),
                        "required": ["id"]
                    }
                },
                "items": [
                    {
                        "id": 1,
                        "date": "06.05.2019",
                        "link": "https://www.google.com",
                        "headline": "Florida man fights with API"
                    }
                ]
            }
            
+ Response 404 (application/vnd.mason+json)

    The client is trying to find owned articles that doesn't exist. 

    + Body
    
            {
                "resource_url": "/api/addedarticles/?owner=owner",
                "@error": {
                    "@message": "Articles not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }